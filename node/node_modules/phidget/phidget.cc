#include <node.h>
#include <phidget21.h>
#include "phidgetmanager.h"

using namespace v8;

//////////////////////////////////////// function: Open()
Handle<Value> Open(const Arguments& args) {
    HandleScope scope;

    device = 0;

    localErrorCatcher(CPhidgetManager_create(&device));
    localErrorCatcher(CPhidgetManager_set_OnAttach_Handler(
                (CPhidgetManagerHandle) device, attachHandler, NULL));
    localErrorCatcher(CPhidgetManager_set_OnDetach_Handler(
                (CPhidgetManagerHandle) device, detachHandler, NULL));
    localErrorCatcher(CPhidgetManager_set_OnError_Handler(
                (CPhidgetManagerHandle) device, libraryErrorHandler, NULL));
    localErrorCatcher(CPhidgetManager_open(
                (CPhidgetManagerHandle) device));

    const char* tmp = (const char*) device;
    printf("\t\t\t\t\t\t%s\n", tmp);
    return scope.Close(String::New((const char*)device));
}

//////////////////////////////////////// function: Close()
Handle<Value> Close(const Arguments& args) {
    HandleScope scope;

    CPhidgetManager_close((CPhidgetManagerHandle) device);
    CPhidgetManager_delete((CPhidgetManagerHandle) device);
    printf("\t\t\t\t\t\tClosed.\n");

    return scope.Close(String::New("Closed."));
}

void InitAll(Handle<Object> ex) {
    ex->Set(String::NewSymbol("open"),
            FunctionTemplate::New(Open)->GetFunction());
    ex->Set(String::NewSymbol("close"),
            FunctionTemplate::New(Close)->GetFunction());
}

NODE_MODULE(phidget, InitAll)
